/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nl.derf.HelloRedis;

/*
Notes for using with Learn:

- Just specify path to bb-config.properties as cmd line arg
- Timestamp logging to stdout
 */

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.exceptions.JedisException;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Set;

public class App {
    private static final ObjectMapper MAPPER = new ObjectMapper();
    private static final String PREFIX = "1793091408";
    private static final Jedis JEDIS = new Jedis("localhost");

    private static void dump() {
        try {
            Set<String> matchingKeys = JEDIS.keys(PREFIX + "*");
            if (matchingKeys.size() == 0) {
                System.err.println("No keys found for prefix " + PREFIX);
                System.exit(1);
            }

            System.out.println("Found " + matchingKeys.size() + " keys");
            RedisDumpedKeyValue[] dumpedKeyValues = new RedisDumpedKeyValue[matchingKeys.size()];

            int index = 0;
            for (String key : matchingKeys) {
                dumpedKeyValues[index] = new RedisDumpedKeyValue(key, JEDIS.dump(key));
                index += 1;
            }

            MAPPER.writeValue(new File("/tmp/test.json"), dumpedKeyValues);
            System.out.println("Wrote JSON file to /tmp/test.json");
        } catch (JedisException|IOException je) {
            System.err.println("Redis error exporting: " + je);
            System.exit(1);
        }
    }

    private static void restore() {
        try {
            RedisDumpedKeyValue[] deserialised = MAPPER.readValue(new File("/tmp/test.json"), RedisDumpedKeyValue[].class);

            for (RedisDumpedKeyValue redisDumpedKeyValue : deserialised) {
                JEDIS.restore(redisDumpedKeyValue.getKey(), 0, redisDumpedKeyValue.getValue());
            }
            System.out.println("Successfully restored " + deserialised.length + " keys");
        } catch (JedisException|IOException je) {
            System.err.println("Redis error importing: " + je);
            System.exit(1);
        }
    }
    public static void main(String[] args) throws IOException  {
        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);

        try {
            if (args.length == 1 && args[0].equals("--restore")) {
                restore();
            } else {
                dump();
            }
        } catch (JedisException je) {
            System.out.println("Redis error: " + je);
        }
    }
}
